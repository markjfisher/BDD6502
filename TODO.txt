; TODO items

* BDD6502: Add text based "mem"/"m" command



* Break of execution for APU
	See wantAPUBreakOnWaitOrPC0 and wantAPUStep
		Check how to operate with receivedBreakAt and isReceivedBreakAt




* Break on memory access (watch)
	CPU and APU


* When the debugger reconnects to BDD6502 force all pending break/watches to be cleared



* Sprites2: Add a configurable threshold to reduce the list scan time used list (com.bdd6502.Sprites2.getDebug)

* Sprites2: Add a breakpoint on exhausted configurable used time for a scanline (com.bdd6502.Sprites2.getDebug)



* calculatePixel() is slow, says the profiler
	Turning off all the layer calculatePixel(), so they quickly return 0, does seem to massively speed up the rendering :D
	Maybe the abstract int calculatePixel() is just really slow?



* ; TODO: This bubble sort is quite slow, use a fast sort instead



* For w$** remove the wrapping d$0 as the data generator has the option now of setting forcing the bus to 0
	* TODO: And test data gen in VC



* Make target/debugchannel.pcmu8 optional



* APU: Cycle exact stateful emulation may be needed to precisely replicate all combinations, for example where ABBRB1/2 is incremented (or loaded) at the same time as reading a value from RAM and assigning it to an internal register



* Note in hardware RH=$180 then $181 but RV = 0 and RV = 1. The first RH pixel is reported as the previous scan index
	Technically the first RH pixel on the new scanline is $181, not $180
	This is going to be very important for the APU emulation




* Simulation of the test data from the chars + sprites test shows char screen/colour uploaded during the screen display have "random" data contention issues.
	This is because the V3.0 hardware prioritises the video address fetch setup over the memory write setup
	This behaviour is observed in the hardware with full user port interface.
	* Not needed for chars with V5.0 hardware. Removed Bus24Bit_WriteMakeSafeReset from demos.




* Emulate RAM contention when their relevant EBBS is set and their address line is set.
	Especially on the character bitplane RAMs and screen/palette data.
	This is to close the emulation gaps to the hardware
	Added for Chars: setAddressBus()




* Does audio frequency need a latch on the high byte to make it read a complete 16 bit value?
	Sometimes yes, if the music updates the frequency a lot, but during tests it isn't that noticeable if the update is done quickly
		In usual cases the update would be done quickly enough not to notice
		Also the latch would mean extra complexity in hardware, which is perhaps not needed



* Measure average instructions between label pairs and output on demand or on schedule



* Create data decompression only unit test



* Add _VBLANK to the proteus debug file write
	The $f8 displayV can then be waited for in the _VBLANK
	This would negate the writes during VBLANK optimisation though?
		See: // This check removes waits for display H/V positions during the VBLANK, the non-visible part of the frame


	
* Match the simulated hardware to the emulated video output, especially the right border, the emulation seems to be a little too far "in"
	Also match the mode7 tiles with the hardware, the left/top of the screen might need syncing slightly with _vynsc/_hsync timing and the dx/dy adds
		Probably 8 pixels



* Real hardware found a bug where mode7 registers way beyond a011 were being written to (see target/DebugData.txt and find d$a02001)
	This needs to throw an exception in this emulation, for all the register sets in all layers



* Detect and fail if Bus24Bit_WaitVSync (the read from the register) is used without Video_EnableDisplay (the register write)
	Or, allow the display enable/disable to just act on the output pixel stage and allow the counters to operate
	
	

* Image comparison needs to output a highlight of where the pixel differences are


* The contention time might need to be a bit longer considering the ageing speed with the 6502 speed
	Make the ageing and video clocks per instruction configurable, to allow a fast or slow 6502 to be emulated



* Have a separate section that animates for a few frames for "// Contention timing test"



* Read config for video display from command line



* I need some syntax that measures the percentage of code executed and memory accessed so I can have code coverage metrics during tests
  and fails if a test doesn't exercise what I think are important code paths



* Add cartridge support
	Read CRT files and store their banks and addresses into a map for easy lookup
	Add syntax to optionally configure cartridge bank address, whether it is read enabled
	Add syntax to specify combinatorial logic (use the variable resolution code ) on multiple locations and enable/disable carts banks, kernal/BASIC ROMs etc
		This can also support bank sizes by mapping cart banks with addresses
	Obviously more than one rule and multiple ROM binary or CRT files can be specified allowing complex cart bank/ROM arrangements to be created
		EF3 and GMod2 need support
			com.loomcom.symon.Bus.write processorPort theProcessorPort
				Detect theProcessorPort changes
					features/C64ROMs.feature
					Given a CRT from file "some\file"
						Will implicitly enable processor port. Note: IO Write detected:
							Done: theProcessorPort needs $17 on reset to emulate the C64
						Note: C:\work\c64\stdlib\stdlib.a lines 19-35
						Done: However the precise CRT support will need early hooks into Bus read and write
							But must only access the cart when ProcessorPortDefault or ProcessorPortCharROMBASICKERNAL
							Or for EF3 EASYFLASH_CONTROL_ULTIMAX mode (the default) where the kernal is mapped from the cart
								EASYFLASH_CONTROL_8K is used very early if most of my startup code
								>> Just assume EASYFLASH_CONTROL_8K?
						Then the scenario can start the CPU at the intended vector address
					Note these will be needed in the scenario, but don't need code updates:
						Given a ROM from file "..\..\VICE\C64\kernal" at $e000
						Given a ROM from file "..\..\VICE\C64\basic" at $a000
						Given add C64 hardware
							Adds devices to cover $d000 - $dfff
					Done: Will need expansion to match the processor port config
						>> com.loomcom.symon.Bus.buildDeviceAddressArray can have an array of deviceAddressArrayWrite and deviceAddressArrayRead indexed by the lower three bits of the processor port
							Bus read and write will need different behaviour as writes go to the underlying RAM
								file:///C:/work/C64Docs/unusedino.de/ec64/technical/aay/c64/memcfg.htm
							And will automatically map in devices with $a000 $d000 $d800 $e000 addresses
					* Need to test bank switching behaviour. Create a function that stores known data when it's called from ROM.

	
	
	
* Add support for simulating IRQs and NMIs called via customised entry points and timings.
	For example FFFE or 0314 entry point can be specified directly



* Branch instructions followed by a $xx value must take into account the current PC and calculate the correct destination address before enriching the disassembly output



* Branch instructions must take into account the current ST and indicate of they will be taken, perhaps by highlighting the destination address



* Try to convert the PC to the nearest function label+XXX value by reading the debugger PDB output
