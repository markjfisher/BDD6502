!sal
!pdb "target/t.pdb"
!source "C64/stdlib/stdlib.a"
!source "BombJack/stdlib/Video_Macros.a"
!source "BombJack/stdlib/Bus24Bit_Macros.a"

*=$200
!zn
DisplayScreen
	jsr Bus24Bit_Init

;	jsr Video_DisableDisplay
;	lda #$30
;	jsr Video_EnableDisplay


	jsr Bus24Bit_Reset

	+WaitForFireB_A

	rts

mainLoop

	; Road sprite
	lda sprite4Road
	and #$7f
	asl
	tax

!macro DoScaledSpriteWith .i , .tableX , .tableY {
	lda tabRoadScaleYSize,x
	sta Sprite2_data + 5 + (.i*8)
	sta Sprite2_data + 6 + (.i*8)

	; Remove any X/Y MSB
	lda Sprite2_data + 0 + (.i*8)
	and #$cf
	sta Sprite2_data + 0 + (.i*8)

	; Setup the Y extent
	lda tabRoadScaleYSize+1,x
	sta Sprite2_data + 2 + (.i*8)

	lda #0
	sta .smtheSwing+1

	ldy swingX
	beq .noSwing
	bpl .isPlus
	lda #0
	sec
	sbc swingX
	tay
.isPlus
	lda tabRoadPerspectiveTabLo-1,y
	sta .smSwing+1
	lda tabRoadPerspectiveTabHi-1,y
	sta .smSwing+2
	txa
	lsr
	tay
.smSwing lda $1234,y
	sta .smtheSwing+1

.noSwing

	ldy swingX
	bpl .isPlus2

	; Setup X position
	lda .tableX,x
	sec
	sbc .smtheSwing+1
	sta Sprite2_data + 3 + (.i*8)

	lda .tableX+1,x
	sbc #0
	jmp .commonCompare

.isPlus2
	; Setup X position
	lda .tableX,x
	clc
.smtheSwing	adc #0
	sta Sprite2_data + 3 + (.i*8)

	lda .tableX+1,x
	adc #0

.commonCompare
	beq .is0

	cmp #$ff
	beq .isN1

	; Way outside the limit :)
	cmp #2
	bcs .removeSprite


	; Is 0x1**
	; It is visible inside right edge?
	lda Sprite2_data + 3 + (.i*8)
	cmp #kRoadXMiddleForCompare
	bcc .addMSB
	jmp .removeSprite

.isN1
	; Is 0xff**
	lda Sprite2_data + 3 + (.i*8)
	clc
	; Adjust with the width (Y height in pixels)
	adc Sprite2_data + 2 + (.i*8)
	; No carry indicates the sprite is still far inside the left edge
	bcc .removeSprite

	; Just inside the left edge, still remove
	cmp #kRoadXMiddleForCompare
	bcc .removeSprite

	jmp .addMSB

.is0
	; Is 0x0**
	lda Sprite2_data + 3 + (.i*8)
	clc
	; Adjust with the width (Y height in pixels)
	adc Sprite2_data + 2 + (.i*8)
	; The right edge is carrying over, indicating it's on screen
	bcs .noXMSB

	; Just inside the left edge, still remove
	cmp #kRoadXMiddleForCompare
	bcc .removeSprite

	jmp .noXMSB

.removeSprite
	; Remove sprite
	lda #0
	sta Sprite2_data + 1 + (.i*8)
	sta Sprite2_data + 2 + (.i*8)
	jmp .over

.addMSB
	lda #$10
	ora Sprite2_data + 0 + (.i*8)
	sta Sprite2_data + 0 + (.i*8)
.noXMSB

	lda .tableY,x
	sta Sprite2_data + 1 + (.i*8)
.over
}

;	+DoScaledSpriteWith 0 , tabRoadPosLeft , tabRoadPosY
;	+DoScaledSpriteWith 1 , tabRoadPosLeft , tabRoadPosY_1
	; Useful for testing left and right culling values
	+DoScaledSpriteWith 0 , tabRoadPosRight , tabRoadPosY
	+DoScaledSpriteWith 1 , tabRoadPosLeft , tabRoadPosY_1

	lda sprite4Road
	clc
	adc #25
	and #$7f
	asl
	tax
	+DoScaledSpriteWith 2 , tabRoadPosLeft , tabRoadPosY
	+DoScaledSpriteWith 3 , tabRoadPosLeft , tabRoadPosY_1

	lda sprite4Road
	clc
	adc #50
	and #$7f
	asl
	tax
	+DoScaledSpriteWith 4 , tabRoadPosRight , tabRoadPosY
	+DoScaledSpriteWith 5 , tabRoadPosRight , tabRoadPosY_1

	lda sprite4Road
	clc
	adc #75
	and #$7f
	asl
	tax
	+DoScaledSpriteWith 6 , tabRoadPosRight , tabRoadPosY
	+DoScaledSpriteWith 7 , tabRoadPosRight , tabRoadPosY_1

	lda sprite4Road
	clc
	adc #90
	and #$7f
	asl
	tax
	+DoScaledSpriteWith 8 , tabRoadPosRight , tabRoadPosY
	+DoScaledSpriteWith 9 , tabRoadPosRight , tabRoadPosY_1

	lda sprite4Road
	clc
	adc #115
	and #$7f
	asl
	tax
	+DoScaledSpriteWith 10 , tabRoadPosLeft , tabRoadPosY
	+DoScaledSpriteWith 11 , tabRoadPosLeft , tabRoadPosY_1
	+DoScaledSpriteWith 12 , tabRoadPosRight , tabRoadPosY
	+DoScaledSpriteWith 13 , tabRoadPosRight , tabRoadPosY_1

;	+DoScaledSpriteWith 14 , tabRoadPosLeft , tabRoadPosY
;	+DoScaledSpriteWith 15 , tabRoadPosLeft , tabRoadPosY_1
;	+DoScaledSpriteWith 16 , tabRoadPosRight , tabRoadPosY
;	+DoScaledSpriteWith 17 , tabRoadPosRight , tabRoadPosY_1
;	+DoScaledSpriteWith 18 , tabRoadPosLeft , tabRoadPosY
;	+DoScaledSpriteWith 19 , tabRoadPosLeft , tabRoadPosY_1
;	+DoScaledSpriteWith 20 , tabRoadPosRight , tabRoadPosY
;	+DoScaledSpriteWith 21 , tabRoadPosRight , tabRoadPosY_1
;	+DoScaledSpriteWith 22 , tabRoadPosLeft , tabRoadPosY
;	+DoScaledSpriteWith 23 , tabRoadPosLeft , tabRoadPosY_1


	lda #JoystickBits_Up
	bit CIA1KeyboardRowsJoystickB
	bne .notUp
	inc sprite4Road
.notUp

	lda #JoystickBits_Down
	bit CIA1KeyboardRowsJoystickB
	bne .notDown
	dec sprite4Road
.notDown

	lda #JoystickBits_Left
	bit CIA1KeyboardRowsJoystickB
	bne .notLeft
	inc swingX
	lda swingX
	cmp #kMaxSwing
	bne .notLeft
	lda #kMaxSwing-1
	sta swingX
.notLeft

	lda #JoystickBits_Right
	bit CIA1KeyboardRowsJoystickB
	bne .notRight
	dec swingX
	lda swingX
	cmp #-kMaxSwing
	bne .notRight
	lda #-(kMaxSwing-1)
	sta swingX
.notRight


	+WaitForFireRelease2_A

	jsr Video_WaitVBlank
	+MBus24Bit_SetAddress_AXY $01 , $9200
;	+MBus24Bit_FastSpeedCopy Sprite2_data , 24 * 8
	+MBus24Bit_FastSpeedCopy Sprite2_data , 14 * 8

;	+WaitForFireB_A

	jmp mainLoop

sprite4Road !by 127

Sprite2_data
	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x32
	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x30
	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x33
	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x31

	!by 0x4c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x36
	!by 0x4c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x34
	!by 0x4c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x37
	!by 0x4c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x35

	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x3a
	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x38
	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x3b
	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x39

	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x3e
	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x3c
	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x3f
	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x3d

	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x36
	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x34
	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x37
	!by 0x0c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x35

	!by 0x4c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x32
	!by 0x4c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x30
	!by 0x4c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x33
	!by 0x4c , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x31


!fill 256 , 0

kEntries = 128
kFarPoint = -8
;kFarPoint = 0
kNearPoint = 128
kMaxSwing = 64
kMultiplier = 8
;kMultiplier = 1
kRoadWidth = 180

kRoadXMiddleForCompare = 58
kRoadXMiddle = kRoadXMiddleForCompare + 128

swingX !by 0

tabRoadPerspectiveTabLo
!for .i , kMaxSwing {
	!by < (tabRoadPerspective + ((.i-1)*kEntries))
}
tabRoadPerspectiveTabHi
!for .i , kMaxSwing {
	!by > (tabRoadPerspective + ((.i-1)*kEntries))
}
!align 255 , 0
tabRoadPerspective
!for .i , kMaxSwing {
!for .zz , kEntries {
!set .z = kNearPoint - (.zz-1 + kFarPoint)
	!by ((kMultiplier * 255 * .i) / kMaxSwing) / .z
}
}

tabRoadPosRight
!for .zz , kEntries {
!set .z = kNearPoint - (.zz-1 + kFarPoint)
	+MLittleEndian16Bit kRoadXMiddle + ((kMultiplier * kRoadWidth) / .z)
}
tabRoadPosLeft
!for .zz , kEntries {
!set .z = kNearPoint - (.zz-1 + kFarPoint)
!set .size = (kMultiplier * 96) / .z
	+MLittleEndian16Bit kRoadXMiddle - ((kMultiplier * kRoadWidth) / .z) - .size
}

tabRoadPosY
!for .zz , kEntries {
!set .z = kNearPoint - (.zz-1 + kFarPoint)
!set .size = (kMultiplier * 96) / .z
	+MLittleEndian16Bit 128 + ((kMultiplier * 120) / .z) - .size
}
tabRoadPosY_1
!for .zz , kEntries {
!set .z = kNearPoint - (.zz-1 + kFarPoint)
!set .size = (kMultiplier * 96) / .z
	+MLittleEndian16Bit 128 + ((kMultiplier * 120) / .z) - .size - .size
}

tabRoadScaleYSize
!for .zz , kEntries {
!set .z = kNearPoint - (.zz-1 + kFarPoint)
!set .size = (kMultiplier * 96) / .z
!if .size <= 0 {
!set .size = 1
}
!set .invscale = (32 * 32) / .size
!if .invscale <= 1 {
!set .invscale = 1
}
; Need to calculate the height based on the scale
!set .realSize = (32*32) / int(.invscale)
; Using *32 (<<5) means it's not possible for the sprite to go below 4 pixels wide if the X end point is set to be 0x20.
; This is because (32*32) / 255 ~= 4
; Mitigations are to set the end point to be 0x10 and draw half the sprite, which should suffice in most cases.
; This particular numeric range was chosen to give the sprite "scale up", where it gets larger, a little more accuracy.
; However the Y height can be reduced to be smaller than 4 pixels
!if .invscale >= 255 {
!set .invscale = 255
}
!if .realSize < 1 {
!set .realSize = 1
}
	!by .invscale
	!by .realSize
}


!source "BombJack/stdlib/Bus24Bit.a"
!source "BombJack/stdlib/Video.a"
