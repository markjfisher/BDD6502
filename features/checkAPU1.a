!source "BombJack/stdlib/APU_Macros.a"

* = 0

!macro ReadWaitAndPaletteEntry {
	+MAPU kAPU_Load_Wait8
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_Load_Wait16
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_Load_Wait24
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_WaitForEqualsHV

	+MAPU kAPU_InterceptBus | kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1 | kAPU_Incr_EADDR

	+MAPU kAPU_InterceptBus | kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_EADDRLo
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_InterceptBus | kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1 | kAPU_Incr_EADDR

	+MAPU kAPU_InterceptBus | kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_EADDRLo
	+MAPU kAPU_Incr_ADDRB1
}

APUCode_Start
	+MAPU
	+MAPU kAPU_Reset_ADDRB1 | kAPU_Reset_EBSEADDR

	; Get palette address
	+MAPU kAPU_Load_EBS
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_Load_EADDRLo
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_Load_EADDRHi
	+MAPU kAPU_Incr_ADDRB1

	+ReadWaitAndPaletteEntry
	+ReadWaitAndPaletteEntry
	+ReadWaitAndPaletteEntry

	+ReadWaitAndPaletteEntry
	+ReadWaitAndPaletteEntry
	+ReadWaitAndPaletteEntry

	+MAPU kAPU_Reset_PC
	+MAPU

APUCode_Size = *-APUCode_Start
;!if APUCode_Size >= 256 {
;!error "APU Code too large, need better memcpy"
;}

APUData_Start
	; Palette EBS+address
	!by $01 , $00 , $9c

	; Next RHRV to wait for
	!by $88 , $01 , $40

	; Value to store in $9c00
	!by $11
	; Value to store in $9c01
	!by $22
	; Then set address to $9c1c
	!by $1c
	; Value to store in $9c1c
	!by $11
	; Value to store in $9c1d
	!by $22
	; Then reset address back to $9c00
	!by $00


	; Next RHRV to wait for
	!by $88 , $01 , $50

	; Value to store in $9c00
	!by $33
	; Value to store in $9c01
	!by $44
	; Then set address to $9c1c
	!by $1c
	; Value to store in $9c1c
	!by $33
	; Value to store in $9c1d
	!by $44
	; Then reset address back to $9c00
	!by $00


	; Next RHRV to wait for
	!by $88 , $01 , $60

	; Value to store in $9c00
	!by $55
	; Value to store in $9c01
	!by $66
	; Then set address to $9c1c
	!by $1c
	; Value to store in $9c1c
	!by $55
	; Value to store in $9c1d
	!by $66
	; Then reset address back to $9c00
	!by $00


	; Next frame

	; Next RHRV to wait for
	!by $88 , $01 , $40

	; Value to store in $9c00
	!by $22
	; Value to store in $9c01
	!by $11
	; Then set address to $9c1c
	!by $1c
	; Value to store in $9c1c
	!by $22
	; Value to store in $9c1d
	!by $11
	; Then reset address back to $9c00
	!by $00


	; Next RHRV to wait for
	!by $88 , $01 , $50

	; Value to store in $9c00
	!by $44
	; Value to store in $9c01
	!by $33
	; Then set address to $9c1c
	!by $1c
	; Value to store in $9c1c
	!by $44
	; Value to store in $9c1d
	!by $33
	; Then reset address back to $9c00
	!by $00


	; Next RHRV to wait for
	!by $88 , $01 , $60

	; Value to store in $9c00
	!by $66
	; Value to store in $9c01
	!by $55
	; Then set address to $9c1c
	!by $1c
	; Value to store in $9c1c
	!by $66
	; Value to store in $9c1d
	!by $55
	; Then reset address back to $9c00
	!by $00


APUData_Size = * -APUData_Start
