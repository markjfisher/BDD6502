!sal
!pdb "t.pdb"
!source "C64/stdlib/stdlib.a"
*=$200
!zn
start
	sei
	ldx #$ff
	txs

	jsr Bus24Bit_Init

	jsr Bus24Bit_DisableDisplay
	lda #$30
	jsr Bus24Bit_EnableDisplay
	jsr Bus24Bit_WaitVSync

	; Setup a background colour that is visible
	jsr Bus24Bit_SetAddressPalette
	lda #$21
	sta CIA2PortBRS232
	sta CIA2PortBRS232
	jsr Bus24Bit_WaitVSync

	jsr Bus24Bit_SetAddressSpritesControl
	lda #$10
	sta CIA2PortBRS232
	lda #$00
	sta CIA2PortBRS232

	; Write a test sprite frame 4 palette 1 at $80,$80
	; This also visually demonstrates how the 24 bit memory bus auto-increments the address after each write
	+MWordValueTo_AX SpriteFrame0
	ldy #SpriteFrame0Size
	jsr Bus24Bit_SpriteDataCopy

	jsr Bus24Bit_WaitVSync

	; Move sprites into corners
	+MWordValueTo_AX SpriteFrame1
	ldy #SpriteFrame1Size
	jsr Bus24Bit_SpriteDataCopy

	jsr Bus24Bit_WaitVSync
	
	; Shrink x&y borders
	lda #$f0
	jsr Bus24Bit_EnableDisplay

	jsr Bus24Bit_WaitVSync

	; Full borders again
	lda #$30
	jsr Bus24Bit_EnableDisplay
	
	; Demonstrate video bus and palette bus contention handling by updating sprite registers during the visible portion of the screen
	; Basically, this writes more data in the vblank than there is CPU time for
	; The writes are timed to complete before the bottom sprites are displayed
.do1
	+MWordValueTo_AX SpriteFrame1
	ldy #SpriteFrame1Size
	jsr Bus24Bit_SpriteDataCopy
	jsr Bus24Bit_SetAddressPalette
	ldx #$10
	lda #$11
	clc
.do2
	sta CIA2PortBRS232
	adc #1
	dex
	bne .do2
	dec .counter1
	bne .do1

	; Write to the mode7 background colour register at $01a014
	jsr Bus24Bit_Reset
	lda #$01; EBBS
	sta CIA2PortBRS232
	lda #$14
	sta CIA2PortBRS232
	lda #$a0
	sta CIA2PortBRS232
	; Colour index
	lda #14
	sta CIA2PortBRS232

	
	jsr Bus24Bit_WaitVSync

	rts
.counter1 !by 32

!zn
start2
	sei
	ldx #$ff
	txs
	
	jsr Bus24Bit_WaitVSync
	; Full borders again
	lda #$30
	jsr Bus24Bit_EnableDisplay

	; Setup some characters at known positions
	lda #$01
	+MWordValueTo_XY $9040
	jsr Bus24Bit_SetAddressBus
	lda #$41
	sta CIA2PortBRS232
	lda #$42
	sta CIA2PortBRS232

	lda #$01
	+MWordValueTo_XY $905e
	jsr Bus24Bit_SetAddressBus
	lda #$42
	sta CIA2PortBRS232
	lda #$43
	sta CIA2PortBRS232

	lda #$01
	+MWordValueTo_XY $93a0
	jsr Bus24Bit_SetAddressBus
	lda #$43
	sta CIA2PortBRS232
	lda #$44
	sta CIA2PortBRS232

	lda #$01
	+MWordValueTo_XY $93be
	jsr Bus24Bit_SetAddressBus
	lda #$43
	sta CIA2PortBRS232
	lda #$45
	sta CIA2PortBRS232
	
	jsr Bus24Bit_WaitVSync

	; Move sprites slightly in to reveal more of the characters
	+MWordValueTo_AX SpriteFrame2
	ldy #SpriteFrame2Size
	jsr Bus24Bit_SpriteDataCopy

	jsr Bus24Bit_WaitVSync

	; Setup some characters with known flips, colours, and extended chars
	lda #$01
	+MWordValueTo_XY $9440
	jsr Bus24Bit_SetAddressBus
	lda #$01
	sta CIA2PortBRS232
	lda #$11
	sta CIA2PortBRS232

	lda #$01
	+MWordValueTo_XY $945e
	jsr Bus24Bit_SetAddressBus
	lda #$62
	sta CIA2PortBRS232
	lda #$42
	sta CIA2PortBRS232

	lda #$01
	+MWordValueTo_XY $97a0
	jsr Bus24Bit_SetAddressBus
	lda #$83
	sta CIA2PortBRS232
	lda #$93
	sta CIA2PortBRS232

	lda #$01
	+MWordValueTo_XY $97be
	jsr Bus24Bit_SetAddressBus
	lda #$e3
	sta CIA2PortBRS232
	lda #$c3
	sta CIA2PortBRS232
	
	jsr Bus24Bit_WaitVSync

	rts

!zn
start3
	sei
	ldx #$ff
	txs
	
	jsr Bus24Bit_WaitVSync
	; Shrink borderX
	lda #$70
	jsr Bus24Bit_EnableDisplay
	jsr Bus24Bit_WaitVSync

	; Shrink borderY
	lda #$b0
	jsr Bus24Bit_EnableDisplay
	jsr Bus24Bit_WaitVSync

	; Shrink borderX+Y
	lda #$f0
	jsr Bus24Bit_EnableDisplay
	jsr Bus24Bit_WaitVSync

	rts

!zn
start4
	sei
	ldx #$ff
	txs

	jsr Bus24Bit_WaitVSync

	lda #$01
	+MWordValueTo_XY $a000
	jsr Bus24Bit_SetAddressBus
	
	+MWordValueTo_AX Mode7Regs1
	ldy #Mode7Regs1Size
	jsr Bus24Bit_CopySmallData
	
	jsr Bus24Bit_WaitVSync


	lda #$01
	+MWordValueTo_XY $a000
	jsr Bus24Bit_SetAddressBus
	
	+MWordValueTo_AX Mode7Regs3
	ldy #Mode7Regs3Size
	jsr Bus24Bit_CopySmallData
	
	jsr Bus24Bit_WaitVSync


	lda #$01
	+MWordValueTo_XY $a000
	jsr Bus24Bit_SetAddressBus
	
	+MWordValueTo_AX Mode7Regs2
	ldy #Mode7Regs2Size
	jsr Bus24Bit_CopySmallData
	
	jsr Bus24Bit_WaitVSync
	rts


!zn
start5
	sei
	ldx #$ff
	txs

	jsr Bus24Bit_WaitVSync

.l1
	; This is very fast movement
	lda Mode7Regs3Translation
	clc
	adc #$31
	sta Mode7Regs3Translation
	adc #1
	sta Mode7Regs3Translation+1

	lda Mode7Regs3Translation+3
	clc
	adc #$71
	sta Mode7Regs3Translation+3
	adc #1
	sta Mode7Regs3Translation+4

	; Translation regs only
	lda #$01
	+MWordValueTo_XY $a00c
	jsr Bus24Bit_SetAddressBus

	+MWordValueTo_AX Mode7Regs3Translation
	ldy #Mode7Regs3TranslationSize
	jsr Bus24Bit_CopySmallData

	jsr Bus24Bit_WaitVSync
	
	dec Mode7Regs3TranslationCount
	bne .l1
	rts
	
	
	
!zn
start6
	sei
	ldx #$ff
	txs
	
	jsr Bus24Bit_WaitVSync
	; Shrink borderX+Y
	lda #$f0
	jsr Bus24Bit_EnableDisplay

	; Setup some tiles at known positions
	lda #$80
	+MWordValueTo_XY $2040
	jsr Bus24Bit_SetAddressBus
	lda #$41
	sta CIA2PortBRS232
	lda #$42
	sta CIA2PortBRS232

	lda #$80
	+MWordValueTo_XY $204f
	jsr Bus24Bit_SetAddressBus
	lda #$42
	sta CIA2PortBRS232
	lda #$43
	sta CIA2PortBRS232

	lda #$80
	+MWordValueTo_XY $2380
	jsr Bus24Bit_SetAddressBus
	lda #$43
	sta CIA2PortBRS232
	lda #$44
	sta CIA2PortBRS232

	lda #$80
	+MWordValueTo_XY $238f
	jsr Bus24Bit_SetAddressBus
	lda #$43
	sta CIA2PortBRS232
	lda #$45
	sta CIA2PortBRS232
	
	jsr Bus24Bit_WaitVSync
	; Full borders again
	lda #$30
	jsr Bus24Bit_EnableDisplay

	jsr Bus24Bit_WaitVSync

	; Setup some tiles with known flips and colours
	lda #$80
	+MWordValueTo_XY $3040
	jsr Bus24Bit_SetAddressBus
	lda #$01
	sta CIA2PortBRS232
	lda #$11
	sta CIA2PortBRS232

	lda #$80
	+MWordValueTo_XY $304f
	jsr Bus24Bit_SetAddressBus
	lda #$62
	sta CIA2PortBRS232
	lda #$42
	sta CIA2PortBRS232

	lda #$80
	+MWordValueTo_XY $3380
	jsr Bus24Bit_SetAddressBus
	lda #$83
	sta CIA2PortBRS232
	lda #$93
	sta CIA2PortBRS232

	lda #$80
	+MWordValueTo_XY $338f
	jsr Bus24Bit_SetAddressBus
	lda #$e3
	sta CIA2PortBRS232
	lda #$c3
	sta CIA2PortBRS232
	
	jsr Bus24Bit_WaitVSync

	rts
	
!zn	
Mode7Regs1
	+MLittleEndian24Bit $100
	+MLittleEndian24Bit 0
	+MLittleEndian24Bit $100
	+MLittleEndian24Bit 0

	+MLittleEndian24Bit 0
	+MLittleEndian24Bit 0
Mode7Regs1Size = * - Mode7Regs1

Mode7Regs2
	+MLittleEndian24Bit $400
	+MLittleEndian24Bit 0
	+MLittleEndian24Bit $400
	+MLittleEndian24Bit 0

	+MLittleEndian24Bit 0
	+MLittleEndian24Bit 0
Mode7Regs2Size = * - Mode7Regs1

Mode7Regs3
	+MLittleEndian24Bit $80
	+MLittleEndian24Bit 0
	+MLittleEndian24Bit $80
	+MLittleEndian24Bit 0

Mode7Regs3Translation
	+MLittleEndian24Bit 0
	+MLittleEndian24Bit 0
Mode7Regs3Size = * - Mode7Regs1
Mode7Regs3TranslationSize = * - Mode7Regs3Translation
Mode7Regs3TranslationCount !by 8
	
; Sprite positions
SpriteFrame0
	!by $04,$01,$80,$00
	!by $04,$81,$80,$28
	!by $04,$41,$80,$50
	!by $04,$c1,$80,$78
SpriteFrame0Size = * - SpriteFrame0

SpriteFrame1
	!by $04,$01,$10,$00
	!by $04,$81,$10,$f0
	!by $04,$41,$e0,$00
	!by $04,$c1,$e0,$f0
SpriteFrame1Size = * - SpriteFrame1

SpriteFrame2
	!by $04,$01,$14,$04
	!by $04,$81,$14,$ec
	!by $04,$41,$e0,$04
	!by $04,$c1,$e0,$ec
SpriteFrame2Size = * - SpriteFrame2

!source "BombJack/stdlib/Bus24Bit.a"
!source "BombJack/stdlib/Video.a"
