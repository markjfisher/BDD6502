!sal
!pdb "t.pdb"
!source "stdlib/stdlib.a"
*=$200
!zn
start
	sei
	ldx #$ff
	txs

	jsr init24BitBus

	jsr videoDisableDisplay
	lda #$30
	jsr videoEnableDisplay
	jsr waitVSYnc

	; Setup a background colour that is visible
	jsr setAddressPalette
	lda #$21
	sta $dd01
	sta $dd01
	jsr waitVSYnc

	jsr setAddressSpritesControl
	lda #$10
	sta $dd01
	lda #$00
	sta $dd01

	; Write a test sprite frame 4 palette 1 at $80,$80
	; This also visually demonstrates how the 24 bit memory bus auto-increments the address after each write
	+MWordValueTo_AX SpriteFrame0
	ldy #SpriteFrame0Size
	jsr SpriteDataCopy

	jsr waitVSYnc

	; Move sprites into corners
	+MWordValueTo_AX SpriteFrame1
	ldy #SpriteFrame1Size
	jsr SpriteDataCopy

	jsr waitVSYnc
	
	; Shrink x&y borders
	lda #$f0
	jsr videoEnableDisplay

	jsr waitVSYnc

	; Full borders again
	lda #$30
	jsr videoEnableDisplay
	
	; Demonstrate video bus and palette bus contention handling by updating sprite registers during the visible portion of the screen
	; Basically, this writes more data in the vblank than there is CPU time for
	; The writes are timed to complete before the bottom sprites are displayed
.do1
	+MWordValueTo_AX SpriteFrame1
	ldy #SpriteFrame1Size
	jsr SpriteDataCopy
	jsr setAddressPalette
	ldx #$10
	lda #$11
	clc
.do2
	sta $dd01
	adc #1
	dex
	bne .do2
	dec .counter1
	bne .do1

	; Write to the mode7 background colour register at $01a014
	jsr reset24BitBus
	lda #$01; EBBS
	sta $dd01
	lda #$14
	sta $dd01
	lda #$a0
	sta $dd01
	; Colour index
	lda #14
	sta $dd01

	
	jsr waitVSYnc

	rts
.counter1 !by 32

!zn
start2
	sei
	ldx #$ff
	txs
	
	jsr waitVSYnc
	; Full borders again
	lda #$30
	jsr videoEnableDisplay

	; Setup some characters at known positions
	lda #$01
	+MWordValueTo_XY $9040
	jsr setAddressBus
	lda #$41
	sta $dd01
	lda #$42
	sta $dd01

	lda #$01
	+MWordValueTo_XY $905e
	jsr setAddressBus
	lda #$42
	sta $dd01
	lda #$43
	sta $dd01

	lda #$01
	+MWordValueTo_XY $93a0
	jsr setAddressBus
	lda #$43
	sta $dd01
	lda #$44
	sta $dd01

	lda #$01
	+MWordValueTo_XY $93be
	jsr setAddressBus
	lda #$43
	sta $dd01
	lda #$45
	sta $dd01
	
	jsr waitVSYnc

	; Move sprites slightly in to reveal more of the characters
	+MWordValueTo_AX SpriteFrame2
	ldy #SpriteFrame2Size
	jsr SpriteDataCopy

	jsr waitVSYnc

	; Setup some characters with known flips, colours, and extended chars
	lda #$01
	+MWordValueTo_XY $9440
	jsr setAddressBus
	lda #$01
	sta $dd01
	lda #$11
	sta $dd01

	lda #$01
	+MWordValueTo_XY $945e
	jsr setAddressBus
	lda #$62
	sta $dd01
	lda #$42
	sta $dd01

	lda #$01
	+MWordValueTo_XY $97a0
	jsr setAddressBus
	lda #$83
	sta $dd01
	lda #$93
	sta $dd01

	lda #$01
	+MWordValueTo_XY $97be
	jsr setAddressBus
	lda #$e3
	sta $dd01
	lda #$c3
	sta $dd01
	
	jsr waitVSYnc

	rts

!zn
start3
	sei
	ldx #$ff
	txs
	
	jsr waitVSYnc
	; Shrink borderX
	lda #$70
	jsr videoEnableDisplay
	jsr waitVSYnc

	; Shrink borderY
	lda #$b0
	jsr videoEnableDisplay
	jsr waitVSYnc

	; Shrink borderX+Y
	lda #$f0
	jsr videoEnableDisplay
	jsr waitVSYnc

	rts

!zn
start4
	sei
	ldx #$ff
	txs

	jsr waitVSYnc

	lda #$01
	+MWordValueTo_XY $a000
	jsr setAddressBus
	
	+MWordValueTo_AX Mode7Regs1
	ldy #Mode7Regs1Size
	jsr copySmallDataTo24BitBus
	
	jsr waitVSYnc


	lda #$01
	+MWordValueTo_XY $a000
	jsr setAddressBus
	
	+MWordValueTo_AX Mode7Regs3
	ldy #Mode7Regs3Size
	jsr copySmallDataTo24BitBus
	
	jsr waitVSYnc


	lda #$01
	+MWordValueTo_XY $a000
	jsr setAddressBus
	
	+MWordValueTo_AX Mode7Regs2
	ldy #Mode7Regs2Size
	jsr copySmallDataTo24BitBus
	
	jsr waitVSYnc
	rts


!zn
start5
	sei
	ldx #$ff
	txs

	jsr waitVSYnc

.l1
	; This is very fast movement
	lda Mode7Regs3Translation
	clc
	adc #$31
	sta Mode7Regs3Translation
	adc #1
	sta Mode7Regs3Translation+1

	lda Mode7Regs3Translation+3
	clc
	adc #$71
	sta Mode7Regs3Translation+3
	adc #1
	sta Mode7Regs3Translation+4

	; Translation regs only
	lda #$01
	+MWordValueTo_XY $a00c
	jsr setAddressBus

	+MWordValueTo_AX Mode7Regs3Translation
	ldy #Mode7Regs3TranslationSize
	jsr copySmallDataTo24BitBus

	jsr waitVSYnc
	
	dec Mode7Regs3TranslationCount
	bne .l1
	rts
	
	
	
!zn
start6
	sei
	ldx #$ff
	txs
	
	jsr waitVSYnc
	; Shrink borderX+Y
	lda #$f0
	jsr videoEnableDisplay

	; Setup some tiles at known positions
	lda #$80
	+MWordValueTo_XY $2040
	jsr setAddressBus
	lda #$41
	sta $dd01
	lda #$42
	sta $dd01

	lda #$80
	+MWordValueTo_XY $204f
	jsr setAddressBus
	lda #$42
	sta $dd01
	lda #$43
	sta $dd01

	lda #$80
	+MWordValueTo_XY $2380
	jsr setAddressBus
	lda #$43
	sta $dd01
	lda #$44
	sta $dd01

	lda #$80
	+MWordValueTo_XY $238f
	jsr setAddressBus
	lda #$43
	sta $dd01
	lda #$45
	sta $dd01
	
	jsr waitVSYnc
	; Full borders again
	lda #$30
	jsr videoEnableDisplay

	jsr waitVSYnc

	; Setup some tiles with known flips and colours
	lda #$80
	+MWordValueTo_XY $3040
	jsr setAddressBus
	lda #$01
	sta $dd01
	lda #$11
	sta $dd01

	lda #$80
	+MWordValueTo_XY $304f
	jsr setAddressBus
	lda #$62
	sta $dd01
	lda #$42
	sta $dd01

	lda #$80
	+MWordValueTo_XY $3380
	jsr setAddressBus
	lda #$83
	sta $dd01
	lda #$93
	sta $dd01

	lda #$80
	+MWordValueTo_XY $338f
	jsr setAddressBus
	lda #$e3
	sta $dd01
	lda #$c3
	sta $dd01
	
	jsr waitVSYnc

	rts
	
!macro number24Bits .a {
	!by .a & $ff , (.a >> 8)  & $ff , (.a >> 16)  & $ff
	}

!zn	
Mode7Regs1
	+number24Bits $100
	+number24Bits 0
	+number24Bits $100
	+number24Bits 0

	+number24Bits 0
	+number24Bits 0
Mode7Regs1Size = * - Mode7Regs1

Mode7Regs2
	+number24Bits $400
	+number24Bits 0
	+number24Bits $400
	+number24Bits 0

	+number24Bits 0
	+number24Bits 0
Mode7Regs2Size = * - Mode7Regs1

Mode7Regs3
	+number24Bits $80
	+number24Bits 0
	+number24Bits $80
	+number24Bits 0

Mode7Regs3Translation
	+number24Bits 0
	+number24Bits 0
Mode7Regs3Size = * - Mode7Regs1
Mode7Regs3TranslationSize = * - Mode7Regs3Translation
Mode7Regs3TranslationCount !by 8
	
; Sprite positions
SpriteFrame0
	!by $04,$01,$80,$00
	!by $04,$81,$80,$28
	!by $04,$41,$80,$50
	!by $04,$c1,$80,$78
SpriteFrame0Size = * - SpriteFrame0

SpriteFrame1
	!by $04,$01,$10,$00
	!by $04,$81,$10,$f0
	!by $04,$41,$e0,$00
	!by $04,$c1,$e0,$f0
SpriteFrame1Size = * - SpriteFrame1

SpriteFrame2
	!by $04,$01,$14,$04
	!by $04,$81,$14,$ec
	!by $04,$41,$e0,$04
	!by $04,$c1,$e0,$ec
SpriteFrame2Size = * - SpriteFrame2

SpriteDataCopy
	pha
	jsr setAddressSprites
	pla
	jmp copySmallDataTo24BitBus



	
init24BitBus
	; Setup PA2 for writing
	lda #%100
	sta $dd02

	; Setup output of 8 bits
	lda #$ff
	sta $dd03
	
	jsr reset24BitBus
	; Send zero bytes for the bus and data
	lda #0
	sta $dd01
	sta $dd01
	sta $dd01
	sta $dd01
	jsr reset24BitBus
	rts

; Waits for vsync to be triggered from the video
waitVSYnc
	lda #%10000
.l2
	bit $dd0d
	beq .l2
	rts
	
copySmallDataTo24BitBus
	sta .sm1+1
	stx .sm1+2
	sty .sm2+1
	ldy #0
.l1
.sm1	lda $1234,y
	sta $dd01
	iny
.sm2	cpy #0
	bne .sm1
	rts

; Resets the 24 bit bus
reset24BitBus
	; Reset the state input again
	lda #%000
	sta $dd00
	lda #%100
	sta $dd00
	rts

videoDisableDisplay
	jsr setAddressVideoControlRegisters
	lda #$00
	sta $dd01
	rts

videoEnableDisplay
	pha
	jsr setAddressVideoControlRegisters
	pla
	sta $dd01
	rts

setAddressVideoControlRegisters
	jsr reset24BitBus
	lda #$01; EBBS
	sta $dd01
	lda #$00
	sta $dd01
	lda #$9e
	sta $dd01
	rts

setAddressPalette
	jsr reset24BitBus
	lda #$01; EBBS
	sta $dd01
	lda #$00
	sta $dd01
	lda #$9c
	sta $dd01
	rts

setAddressSprites
	jsr reset24BitBus
	lda #$01; EBBS
	sta $dd01
	lda #$20
	sta $dd01
	lda #$98
	sta $dd01
	rts

setAddressSpritesControl
	jsr reset24BitBus
	lda #$01; EBBS
	sta $dd01
	lda #$00
	sta $dd01
	lda #$9a
	sta $dd01
	rts

; A = EBBS
; X/Y = lo/hi address
setAddressBus
	pha
	jsr reset24BitBus
	pla
	sta $dd01
	stx $dd01
	sty $dd01
	rts
