!sal
!pdb "t.pdb"
!source "C64/stdlib/stdlib.a"
!source "BombJack/stdlib/Video_Macros.a"

*=$200
!zn
start
	sei
;	ldx #$ff
;	txs

	jsr Bus24Bit_Init
	jsr APU_ResetDisable
	jsr Bus24Bit_DisableDisplay

	jsr Bus24Bit_SetAddressAPUInstructions
	+MWordValueTo_AX APUCode_Start
	ldy #<APUCode_Size
	jsr Bus24Bit_CopySmallData
	ldx #>APUCode_Size
	jsr Bus24Bit_CopySmallDataRepeatForX

	jsr Bus24Bit_SetAddressAPUData
	+MWordValueTo_AX APUData_Start
	ldy #APUData_Size
	jsr Bus24Bit_CopySmallData
	jsr APU_Enable

	lda #$30
	jsr Bus24Bit_EnableDisplay
	jsr Bus24Bit_WaitVBlank

	; Setup a background colour that is visible
	jsr Bus24Bit_SetAddressPalette
	lda #$21
	sta CIA2PortBRS232
	sta CIA2PortBRS232
	jsr Bus24Bit_WaitVBlank

	jsr Bus24Bit_SetAddressSpritesControl
	lda #$10
	sta CIA2PortBRS232
	lda #$00
	sta CIA2PortBRS232

	; Write a test sprite frame 4 palette 1 at $80,$80
	; This also visually demonstrates how the 24 bit memory bus auto-increments the address after each write
	+MWordValueTo_AX SpriteFrame0
	ldy #SpriteFrame0Size
	jsr Bus24Bit_SpriteDataCopy

	jsr Bus24Bit_WaitVBlank

	; Move sprites into corners
	+MWordValueTo_AX SpriteFrame1
	ldy #SpriteFrame1Size
	jsr Bus24Bit_SpriteDataCopy

	jsr Bus24Bit_WaitVBlank
	
	; Shrink x&y borders
	lda #$f0
	jsr Bus24Bit_EnableDisplay

	jsr Bus24Bit_WaitVBlank

	; Full borders again
	lda #$30
	jsr Bus24Bit_EnableDisplay

!if 1 {
	; Demonstrate video bus and palette bus contention handling by updating sprite registers during the visible portion of the screen
	; Basically, this writes more data in the vblank than there is CPU time for
	; The writes are timed to complete before the bottom sprites are displayed
.do1
	+MWordValueTo_AX SpriteFrame1
	ldy #SpriteFrame1Size
	jsr Bus24Bit_SpriteDataCopy
	jsr Bus24Bit_SetAddressPalette
	ldx #$10
	lda #$11
	clc
.do2
	sta CIA2PortBRS232
	adc #1
	dex
	bne .do2
	dec .counter1
	bne .do1
}

	; Write to the mode7 background colour register at $01a014
	jsr Bus24Bit_Reset
	lda #$01; EBBS
	sta CIA2PortBRS232
	lda #$14
	sta CIA2PortBRS232
	lda #$a0
	sta CIA2PortBRS232
	; Colour index
	lda #14
	sta CIA2PortBRS232
	; Enable flags
	lda #$1f
	sta CIA2PortBRS232

	jsr Bus24Bit_WaitVBlank

	rts
.counter1 !by 32

!zn
start2
	sei
;	ldx #$ff
;	txs
	
	jsr Bus24Bit_WaitVBlank
	; Full borders again
	lda #$30
	jsr Bus24Bit_EnableDisplay

	; Setup some characters at known positions
	lda #$01
	+MWordValueTo_XY $9040
	jsr Bus24Bit_SetAddressBus
	lda #$41
	sta CIA2PortBRS232
	lda #$42
	sta CIA2PortBRS232

	lda #$01
	+MWordValueTo_XY $905e
	jsr Bus24Bit_SetAddressBus
	lda #$42
	sta CIA2PortBRS232
	lda #$43
	sta CIA2PortBRS232

	lda #$01
	+MWordValueTo_XY $93a0
	jsr Bus24Bit_SetAddressBus
	lda #$43
	sta CIA2PortBRS232
	lda #$44
	sta CIA2PortBRS232

	lda #$01
	+MWordValueTo_XY $93be
	jsr Bus24Bit_SetAddressBus
	lda #$43
	sta CIA2PortBRS232
	lda #$45
	sta CIA2PortBRS232
	
	jsr Bus24Bit_WaitVBlank

	; Move sprites slightly in to reveal more of the characters
	+MWordValueTo_AX SpriteFrame2
	ldy #SpriteFrame2Size
	jsr Bus24Bit_SpriteDataCopy

	jsr Bus24Bit_WaitVBlank

	; Setup some characters with known flips, colours, and extended chars
	lda #$01
	+MWordValueTo_XY $9440
	jsr Bus24Bit_SetAddressBus
	lda #$01
	sta CIA2PortBRS232
	lda #$11
	sta CIA2PortBRS232

	lda #$01
	+MWordValueTo_XY $945e
	jsr Bus24Bit_SetAddressBus
	lda #$62
	sta CIA2PortBRS232
	lda #$42
	sta CIA2PortBRS232

	lda #$01
	+MWordValueTo_XY $97a0
	jsr Bus24Bit_SetAddressBus
	lda #$83
	sta CIA2PortBRS232
	lda #$93
	sta CIA2PortBRS232

	lda #$01
	+MWordValueTo_XY $97be
	jsr Bus24Bit_SetAddressBus
	lda #$e3
	sta CIA2PortBRS232
	lda #$c3
	sta CIA2PortBRS232
	
	jsr Bus24Bit_WaitVBlank

	rts

!zn
start3
	sei
;	ldx #$ff
;	txs
	
	jsr Bus24Bit_WaitVBlank
	; Shrink borderX
	lda #$70
	jsr Bus24Bit_EnableDisplay
	jsr Bus24Bit_WaitVBlank

	; Shrink borderY
	lda #$b0
	jsr Bus24Bit_EnableDisplay
	jsr Bus24Bit_WaitVBlank

	; Shrink borderX+Y
	lda #$f0
	jsr Bus24Bit_EnableDisplay
	jsr Bus24Bit_WaitVBlank

	rts

!zn
start4
	sei
;	ldx #$ff
;	txs

	jsr Bus24Bit_WaitVBlank

	lda #$01
	+MWordValueTo_XY $a000
	jsr Bus24Bit_SetAddressBus
	
	+MWordValueTo_AX Mode7Regs1
	ldy #Mode7Regs1Size
	jsr Bus24Bit_CopySmallData
	
	jsr Bus24Bit_WaitVBlank


	lda #$01
	+MWordValueTo_XY $a000
	jsr Bus24Bit_SetAddressBus
	
	+MWordValueTo_AX Mode7Regs3
	ldy #Mode7Regs3Size
	jsr Bus24Bit_CopySmallData
	
	jsr Bus24Bit_WaitVBlank


	lda #$01
	+MWordValueTo_XY $a000
	jsr Bus24Bit_SetAddressBus
	
	+MWordValueTo_AX Mode7Regs2
	ldy #Mode7Regs2Size
	jsr Bus24Bit_CopySmallData
	
	jsr Bus24Bit_WaitVBlank
	rts


!zn
start5
	sei
;	ldx #$ff
;	txs

	jsr Bus24Bit_WaitVBlank

.l1
	; This is very fast movement
	lda Mode7Regs3Translation
	clc
	adc #$31
	sta Mode7Regs3Translation
	adc #1
	sta Mode7Regs3Translation+1

	lda Mode7Regs3Translation+3
	clc
	adc #$71
	sta Mode7Regs3Translation+3
	adc #1
	sta Mode7Regs3Translation+4

	; Translation regs only
	lda #$01
	+MWordValueTo_XY $a00c
	jsr Bus24Bit_SetAddressBus

	+MWordValueTo_AX Mode7Regs3Translation
	ldy #Mode7Regs3TranslationSize
	jsr Bus24Bit_CopySmallData

	jsr Bus24Bit_WaitVBlank
	
	dec Mode7Regs3TranslationCount
	bne .l1
	rts
	
	
	
!zn
start6
	sei
;	ldx #$ff
;	txs
	
	jsr Bus24Bit_WaitVBlank
	; Shrink borderX+Y
	lda #$f0
	jsr Bus24Bit_EnableDisplay

	; Setup some tiles at known positions
	lda #$80
	+MWordValueTo_XY $2040
	jsr Bus24Bit_SetAddressBus
	lda #$41
	sta CIA2PortBRS232
	lda #$42
	sta CIA2PortBRS232

	lda #$80
	+MWordValueTo_XY $204f
	jsr Bus24Bit_SetAddressBus
	lda #$42
	sta CIA2PortBRS232
	lda #$43
	sta CIA2PortBRS232

	lda #$80
	+MWordValueTo_XY $2380
	jsr Bus24Bit_SetAddressBus
	lda #$43
	sta CIA2PortBRS232
	lda #$44
	sta CIA2PortBRS232

	lda #$80
	+MWordValueTo_XY $238f
	jsr Bus24Bit_SetAddressBus
	lda #$43
	sta CIA2PortBRS232
	lda #$45
	sta CIA2PortBRS232
	
	jsr Bus24Bit_WaitVBlank
	; Full borders again
	lda #$30
	jsr Bus24Bit_EnableDisplay

	jsr Bus24Bit_WaitVBlank

	; Setup some tiles with known flips and colours
	lda #$80
	+MWordValueTo_XY $3040
	jsr Bus24Bit_SetAddressBus
	lda #$01
	sta CIA2PortBRS232
	lda #$11
	sta CIA2PortBRS232

	lda #$80
	+MWordValueTo_XY $304f
	jsr Bus24Bit_SetAddressBus
	lda #$62
	sta CIA2PortBRS232
	lda #$42
	sta CIA2PortBRS232

	lda #$80
	+MWordValueTo_XY $3380
	jsr Bus24Bit_SetAddressBus
	lda #$83
	sta CIA2PortBRS232
	lda #$93
	sta CIA2PortBRS232

	lda #$80
	+MWordValueTo_XY $338f
	jsr Bus24Bit_SetAddressBus
	lda #$e3
	sta CIA2PortBRS232
	lda #$c3
	sta CIA2PortBRS232
	
	jsr Bus24Bit_WaitVBlank

	rts

!zn
PlaySample
	lda #$01
	+MWordValueTo_XY $802c
	jsr Bus24Bit_SetAddressBus
	lda #0
	sta CIA2PortBRS232
	sta CIA2PortBRS232

	lda #$01
	+MWordValueTo_XY $8000
	jsr Bus24Bit_SetAddressBus

	; Volume
	lda #$ff
	sta CIA2PortBRS232
	; Start
	lda #$00
	sta CIA2PortBRS232
	sta CIA2PortBRS232
	; Length
	lda #$ff
	sta CIA2PortBRS232
	sta CIA2PortBRS232
	; Rate ($1000) = counterShiftValue which should be exactly sampleRate
	lda #$00
	sta CIA2PortBRS232
	lda #$10
	sta CIA2PortBRS232
	; Loop start
	lda #$10
	sta CIA2PortBRS232
	sta CIA2PortBRS232
	; Loop length
	lda #$1f
	sta CIA2PortBRS232
	sta CIA2PortBRS232

	lda #$01
	+MWordValueTo_XY $802c
	jsr Bus24Bit_SetAddressBus
	lda #1
	sta CIA2PortBRS232
	sta CIA2PortBRS232

	rts


!zn	
Mode7Regs1
	+MLittleEndian24Bit $100
	+MLittleEndian24Bit 0
	+MLittleEndian24Bit $100
	+MLittleEndian24Bit 0

	+MLittleEndian24Bit 0
	+MLittleEndian24Bit 0
Mode7Regs1Size = * - Mode7Regs1

Mode7Regs2
	+MLittleEndian24Bit $400
	+MLittleEndian24Bit 0
	+MLittleEndian24Bit $400
	+MLittleEndian24Bit 0

	+MLittleEndian24Bit 0
	+MLittleEndian24Bit 0
Mode7Regs2Size = * - Mode7Regs2

Mode7Regs3
	+MLittleEndian24Bit $80
	+MLittleEndian24Bit 0
	+MLittleEndian24Bit $80
	+MLittleEndian24Bit 0

Mode7Regs3Translation
	+MLittleEndian24Bit 0
	+MLittleEndian24Bit 0
Mode7Regs3Size = * - Mode7Regs3
Mode7Regs3TranslationSize = * - Mode7Regs3Translation
Mode7Regs3TranslationCount !by 8
	
; Sprite positions
SpriteFrame0
	!by $04,$01,$80,$00
	!by $04,$81,$80,$28
	!by $04,$41,$80,$50
	!by $04,$c1,$80,$78
SpriteFrame0Size = * - SpriteFrame0

SpriteFrame1
	!by $04,$01,$10,$00
	!by $04,$81,$10,$f0
	!by $04,$41,$e0,$00
	!by $04,$c1,$e0,$f0
SpriteFrame1Size = * - SpriteFrame1

SpriteFrame2
	!by $04,$01,$14,$04
	!by $04,$81,$14,$ec
	!by $04,$41,$e0,$04
	!by $04,$c1,$e0,$ec
SpriteFrame2Size = * - SpriteFrame2

!source "BombJack/stdlib/APU_Macros.a"
!source "BombJack/stdlib/APU.a"

!macro ReadWaitAndPaletteEntry {
	+MAPU kAPU_Load_Wait8
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_Load_Wait16
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_Load_Wait24
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_WaitForEqualsHV

	+MAPU kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1 | kAPU_Incr_EADDR

	+MAPU kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_EADDRLo | kAPU_IDataSelectReg1

	+MAPU kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1 | kAPU_Incr_EADDR

	+MAPU kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_EADDRLo | kAPU_IDataSelectReg0
}

APUCode_Start
	+MAPU
	+MAPU kAPU_Reset_ADDRB1

	; Setup address lo value for the palette writes
	+MAPU kAPU_IDataRegLoad1
	+MAPU kAPU_Incr_ADDRB1

	; Get palette address
	+MAPU kAPU_Load_EBS
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_Load_EADDRLo | kAPU_IDataSelectReg0
	+MAPU kAPU_Load_EADDRHi
	+MAPU kAPU_Incr_ADDRB1

	+ReadWaitAndPaletteEntry
	+ReadWaitAndPaletteEntry
	+ReadWaitAndPaletteEntry

	+ReadWaitAndPaletteEntry
	+ReadWaitAndPaletteEntry
	+ReadWaitAndPaletteEntry

	+MAPU kAPU_Reset_PC
	+MAPU

APUCode_Size = *-APUCode_Start
;!if APUCode_Size >= 256 {
;!error "APU Code too large, need better memcpy"
;}

APUData_Start
	; Set address to $9c1c
	!by $1c

	; Palette EBS+hi address
	!by $01 , $9c

	; Next RHRV to wait for
	!by $88 , $01 , $40

	; Value to store in $9c00
	!by $11
	; Value to store in $9c01
	!by $22
	; Value to store in $9c1c
	!by $11
	; Value to store in $9c1d
	!by $22


	; Next RHRV to wait for
	!by $88 , $01 , $50

	; Value to store in $9c00
	!by $33
	; Value to store in $9c01
	!by $44
	; Value to store in $9c1c
	!by $33
	; Value to store in $9c1d
	!by $44


	; Next RHRV to wait for
	!by $88 , $01 , $60

	; Value to store in $9c00
	!by $55
	; Value to store in $9c01
	!by $66
	; Value to store in $9c1c
	!by $55
	; Value to store in $9c1d
	!by $66


	; Next frame

	; Next RHRV to wait for
	!by $88 , $01 , $40

	; Value to store in $9c00
	!by $22
	; Value to store in $9c01
	!by $11
	; Value to store in $9c1c
	!by $22
	; Value to store in $9c1d
	!by $11


	; Next RHRV to wait for
	!by $88 , $01 , $50

	; Value to store in $9c00
	!by $44
	; Value to store in $9c01
	!by $33
	; Value to store in $9c1c
	!by $44
	; Value to store in $9c1d
	!by $33


	; Next RHRV to wait for
	!by $88 , $01 , $60

	; Value to store in $9c00
	!by $66
	; Value to store in $9c01
	!by $55
	; Value to store in $9c1c
	!by $66
	; Value to store in $9c1d
	!by $55


APUData_Size = * -APUData_Start
!if APUData_Size >= 256 {
!error "APU Data too large, need better memcpy"
}


!source "BombJack/stdlib/Bus24Bit.a"
!source "BombJack/stdlib/Video.a"
