; Done items

Added: Given I am using C64 processor port options
	This stops writes to the IO registers from going to RAM



* Add emulated BombJack display
	https://github.com/martinpiper/BombJack/blob/master/README.md
	Sprites notes
		0x = far left visible screen pixel
		Done 0y = 16x16 Top of the sprite just below the bottom edge of the visible screen
		Done 0y = 32x32 Middle horizontal part of the sprite just below the bottom edge of the visible screen
	Add 32x32 sprites 9a00-9a01 (largeSprite)
		Done - Check the hardware for how the inclusive register really works with regards to using sprite update slots
			0-3	 No 32x32
			0-4	 Sprite 0 is 32x32, sprite 1 is not drawn, sprites 2 onwards are drawn
			0-5	 Sprite 0,2 is 32x32, sprite 1,3 is not drawn, sprites 4 onwards are drawn
			0-6	 Sprite 0,2,4 is 32x32, sprite 1,3,5 is not drawn, sprites 6 onwards are drawn
			0-7	 Sprite 0,2,4,6 is 32x32, sprite 1,3,5,7 is not drawn, sprites 8 onwards are drawn

			1-4	 Sprite 0 is 32x32, sprite 1 is not drawn, sprites 2 onwards are drawn
			2-4	 Same
			3-4	 Same
			4-4	 No 32x32
			4-5	 Sprites 0-1 are normal, Sprite 2 is 32x32, Sprite 3 is not drawn, sprites 4 onwards are drawn

			5-4	 Sprites 0-1 are normal, Sprite 2 is 32x32, Sprite 3 is not drawn, sprites 4 onwards are drawn
			5-5	 No 32x32
			6-5	 Sprites 0-3 are normal, Sprite 4 is 32x32, Sprite 5 is not drawn, sprites 6 onwards are drawn
			7-5	 Sprites 0-3 are normal, Sprite 4,6 is 32x32, Sprite 5,7 is not drawn, sprites 8 onwards are drawn

			1-5	 Sprite 0,2 is 32x32, sprite 1,3 is not drawn, sprites 4 onwards are drawn
			2-5	 Same


			Does it skip the next sprite?
				Yes
			What about the odd numbers sprites for the ranges?
				No, not the lines into 5R 5S
		Also the sprite frame, does it multiply the sprite frame to ensure it is aligned?
			Yes, it multiplies by 4
			What is the sprite layout?
				01
				23
	Do sprites off the far right appear on the left?
		Yes
	Do sprites off the bottom appear on the top?
		No.
	Done - Add full height mode (fullHeightSprite)



* Emulated hardware display
	When allocating layers, make the address and addressEx configurable
	TODO: Address configs for addressEx=0x01 need to respect the INRAMSEL1 groups 0x8000 0x8800 0x9000 0x9800 ... 0xb800 as these used for selection on each board
		Video board uses fixed address, not configurable.

		
		
* To correctly handle the "lo ENABLEPIXELS (with no border flags)" at 0x189H
	And to handle the hardware plane shifting, which introduces an 8 pixel delay
	The tiles and chars need to latch the Y position at the start of their reads for each tile/char 8 pixel span
	* Sprites also needed this fix, actually it was the sprite span pixel read and clear that gave the hint about the latch
	* See: latchedDisplayV
	* The mode7 layer does not have this problem because it maintains its own pixel clocks from hsync and vsync



* Continue adding syntax to support the other video layers
	features\TestVideoHardware.feature



* Detect when the 24 bit bus is held with an address for an extended number of cycles without data being written
	No need now, the hardware automatically resets the bus a while after the byte is written if another write has not been started



* displayBombJack.isVsyncTriggered
	The $dd0d value is reading the logic level of vsync in the display, it technically doesn't need the reset logic
	However the vsync wait will need a wait for "not vync" if a wait for vsync is issued too quickly after the first wait



* Optional syntax to limit the speed to XX FPS for video display


* Add arrows+ctrl as joystick1 ($dc00) for the video display window



* Output the software bus writes so that the Proteus simulator can use. Will need to detect waits for vsync or log x/y pos for writes



* Using target/debugData.txt the real hardware isn't displaying the high mode7 characters?
	* Mode7Regs2Size and Mode7Regs3Size are wrong, causing strange memory overwrites
	* Verified, by filling map.bin, that tile $02 and $22 are actually rendered
	* The palette used in the tile was the same as the background colour, so it was "invisible".
	* However the palette was being written strangely by the contention test code

	
	
* Twiddle the mode7 HV flips to align them with tiles



* The java video hardware test mode output debug file does not quite render correctly on the hardware
	The raster bars and perspective mode7 part is alternating every frame. Probably something to do with the output displayV not quite catching up properly
	Investigate if the "w$ff01ff00,$ff019000" is not being caught correctly
	It seems waiting for the last line and trying to do all the updates it not working out timing wise
		Removing the wait for line $ff and moving the sprite update to just after the vsync wait worked
	* TODO: Investigate, do we want to want for -ve _VSYNC or -ve VBLANK as it is currently going into the digital data simulator?
		Look at when the better, earlier, timing is just off the bottom of the screen
			VBLANK is better
		* The BDD6502 emulation will need to align the wait to vsync or vblank of course, to match with what the simulator does
	* _VBLANK checking aligned with simulation and emulation

	
	
* Extract memory bus interface for future expansion



* Add audio expansion prototype
	First single channel sound is working at the correct sample rate
	Multiple channel is also working
	* Attempt to convert a small mod/xm
		http://www.retrospekt.com.au/2020/05/tiny-music-a-massive-curated-collection-of-music-in-mod-xm-s3m-other-formats/
		https://www.dropbox.com/sh/yyxyrkin9uj76ie/AABYa381WWs8KXwsIIYo4_q7a?dl=0
		Need to find an up to 8 channel file that will fit within 64K for samples (without down sampling)
		Without too many complex voice controls would also help
		Potential music:
			**4 channels: C:\Users\Martin Piper\Downloads\tiny music\mods\artists\h0ffman\H0ffman - Freerunner.mod
			4 channels: C:\Users\Martin Piper\Downloads\tiny music\mods\artists\mortimer twang\Mortimer Twang - No Sellout.mod
			4 channels: C:\Users\Martin Piper\Downloads\tiny music\mods\artists\mygg\Mygg - Techno Focus.mod
			8 channels: C:\Users\Martin Piper\Downloads\tiny music\mods\artists\zabutom\Zabutom - Godsends.xm
			*4 channels: C:\Users\Martin Piper\Downloads\tiny music\mods\various\4Mat - One Bullet Symphony.xm

		Potential java libs for parsing and converting to semi-optimised 6502 suitable format:
			* http://www.javamod.de/
				http://www.javamod.de/javamod.html

			java -cp ./javamod.jar de.quippy.javamod.main.CommandLine "C:\Users\Martin Piper\Downloads\tiny music\mods\artists\h0ffman\H0ffman - Freerunner.mod"
			ProTracker mod with 31 samples and 4 channels using Protracker frequency table
			Loader code:
				C:\Users\Martin Piper\Downloads\javamod-source\source\de\quippy\javamod\multimedia\mod\loader\tracker\ProTrackerMod.java
			Player code:
				C:\Users\Martin Piper\Downloads\javamod-source\source\de\quippy\javamod\multimedia\mod\ModMixer.java
					startPlayback()
					Might be able to stub out openAudioDevice() and writeSampleDataToLine() and let it parse the file to get info from modMixer.mixIntoBuffer(LBuffer, RBuffer, bufferSize);
				C:\Users\Martin Piper\Downloads\javamod-source\source\de\quippy\javamod\multimedia\mod\mixer\BasicModMixer.java
					mixIntoBuffer(final int[] leftBuffer, final int[] rightBuffer, final int count)
						mixChannelIntoBuffers(final int[] leftBuffer, final int[] rightBuffer, final int startIndex, final int endIndex, final ChannelMemory actMemo)
						Uses:	C:\Users\Martin Piper\Downloads\javamod-source\source\de\quippy\javamod\multimedia\mod\mixer\ProTrackerMixer.java
								C:\Users\Martin Piper\Downloads\javamod-source\source\de\quippy\javamod\multimedia\mod\mixer\BasicModMixer.java
									ChannelMemory
					doTickEvents()
						Potentially more interesting for extracting note events
							Yes definitely a lot more interesting, might even be possible to just call this in a loop to quickly get all the info
				C:\Users\Martin Piper\Downloads\javamod-source\source\de\quippy\javamod\multimedia\mod\mixer\ProTrackerMixer.java
						doRowEffects()
			Some options for export here:
				mixIntoBuffer
					Can export all relevant changes in ChannelMemory
					By modifying mixChannelIntoBuffers()
			* First pass of importing music works, repeating samples are needed, many volume and pitch updates etc are missing.
				The sample frequency conversion (// Convert internal frequency to hardware values) seems to be correct
					java -cp ./javamod.jar de.quippy.javamod.main.CommandLine "C:\Users\Martin Piper\Downloads\_nice_outfit_.mod"



* AudioExpansion could probably do with a loop address and loop length to be used after the first values
	Could use a flip-flop to hold the state, which is reset when high length is written. This obviously adds complexity though.



* Add kMusicCommandDefineSample with index, then remove duplicate sample data from kMusicCommandPlayNote
	Currently: "C:\Users\Martin Piper\Downloads\asikwp_-_twistmachine.mod"
		3 m 20s in 127,487 bytes
		After writing common sample data withkMusicCommandSetSampleData: 61,766 bytes

		
		
* Added audio hardware syntax and test code
	The MemoryBus architecture is also expansion aware.



* Continue MusicPoll with jsr DecompressMusic_GetNextByte
	Process the music events kMusicCommandWaitFrames etc



* Find out why when running from jar the video display slows down.
	It's almost like not enough pixels get calculated?
	* Print the number of instructions elapsed per video display frame
	Hmm Oracle java is slowing down, but this java does not: "C:\Users\Martin Piper\.jdks\corretto-1.8.0_252\bin\java.exe"
		https://aws.amazon.com/corretto/faqs/ is better performance than Oracle java
		Oracle java sucks
			1>Rendered FPS = 48 frameDelta = 535 period=1001 instructionsThisPeriod=610032 instructionsPerFrame=10157 instructionsShortfall=2515
			instructionsThisPeriod=610032
			number of emulated 6502 instructions in 1001 milliseconds
			so .6 MHz
		same jar with Corretto java:
			1>Rendered FPS = 60 frameDelta = 1 period=1001 instructionsThisPeriod=3463955 instructionsPerFrame=57674 instructionsShortfall=-45002
			5.6 times faster
	* QuickDrawPanel::fastSetRGB() created to optimise image drawing further, this is to fix slowdown when using Oracle java compared to the much faster Corretto



* Output raw sample bytes for debug playback and comparison with the hardware
	e.g. "C:\Users\Martin Piper\Downloads\ffmpeg-20200422-2e38c63-win64-static\ffmpeg-20200422-2e38c63-win64-static\bin\ffplay.exe" -f u8 -channels 2 -ar 25000 c:\work\C64\VideoHardware\target\debugchannel.pcmu8
	e.g. "C:\Users\Martin Piper\Downloads\ffmpeg-20200422-2e38c63-win64-static\ffmpeg-20200422-2e38c63-win64-static\bin\ffplay.exe" -f u8 -channels 2 -ar 25000 C:\Work\BDD6502\target\debugchannel.pcmu8



* Emulation will need to match hardware design which now has stereo output



* Force plane ordering, including a plane that is configured to output a specific pixel colour (to emulate poking wires into the header)
	* Tile layer background pixel transparency check. Layer should use specific plane.




* In the hardware simulation: If the sprites layer is the last layer, the sprite's x position seems to update the colour information for the whole vertical strip
	This makes sense since the full height sprite flag has consistent colour and comes from the colour read.
	The bit planes shifters wil be emitting zeros since they will not load the sprite data based on the vertical position test.
	The emulation needs to be updated to reflect this. Currently the emulation does not write colour inforation if the sprite vertical portion is out of range.



* Full height sprites with 32x32 mode enabled, should not display repeated 32x32 sprite data chunks, they should show 32x16 sprite data
	According to the simulation from bus data output by features\TestVideoHardware Chars Sprites.feature



* spriteIndexReJig is used to adjust the sprite reading schedule to that of the hardware



* Chars V4.0 emulation update to match schematic

